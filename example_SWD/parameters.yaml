# //////////////////////////////////////////////////////////////////////////////
#
#                                SeisFlows v3.2.3                                
#
# //////////////////////////////////////////////////////////////////////////////
#
# SeisFlows YAML parameter file that determines code setup and runtime behavior.
# The following commands may be useful for manipulating this file.
#
#   * list out all available module choices:
#       > seisflows print modules
#   * configure the parameter file by autofilling module parameters:
#       > seisflows configure
#   * swap parameter sets between by choosing new modules:
#       > seisflows swap <module> <name> (e.g., seisflows swap solver specfem3d)
# 
# YAML syntax tips:
#   - NoneType == null
#   - infinity == inf
#
#                                    MODULES
#                                    ///////
# workflow (str):    The types and order of functions for running SeisFlows
# system (str):      Computer architecture of the system being used
# solver (str):      External numerical solver to use for waveform simulations
# preprocess (str):  Preprocessing schema for waveform data
# optimize (str):    Optimization algorithm for the inverse problem
# ==============================================================================
workflow: WD_inversion
system: cluster
solver: specfem2dWd
preprocess: default
optimize: LBFGS
# =============================================================================
#
#    Forward Workflow [Workflow Base]
#    --------------------------------
#    Defines foundational structure for Workflow module. When used standalone 
#    is in charge of running forward solver in parallel and (optionally) 
#    calculating data-synthetic misfit and adjoint sources.
#
#    Parameters
#    ----------
#    :type modules: list of module
#    :param modules: instantiated SeisFlows modules which should have been
#        generated by the function `seisflows.config.import_seisflows` with a
#        parameter file generated by seisflows.configure
#    :type generate_data: bool
#    :param generate_data: How to address 'data' in the workflow:
#        - False: real data needs to be provided by the User in
#        `path_data/{source_name}/*` in the same format that the solver will
#        produce synthetics (controlled by `solver.format`) OR
#        - True: 'data' will be generated as synthetic seismograms using
#        a target model provided in `path_model_true`. 
#    :type stop_after: str
#    :param stop_after: optional name of task in task list (use
#        `seisflows print tasks` to get task list for given workflow) to stop
#        workflow after, allowing user to prematurely stop a workflow to explore
#        intermediate results or debug.
#    :type export_traces: bool
#    :param export_traces: export all waveforms that are generated by the
#        external solver to `path_output`. If False, solver traces stored in
#        scratch may be discarded at any time in the workflow
#    :type export_residuals: bool
#    :param export_residuals: export all residuals (data-synthetic misfit) that
#        are generated by the external solver to `path_output`. If False,
#        residuals stored in scratch may be discarded at any time in the 
#        workflow
#
#        
#    Migration Workflow
#    ------------------
#    Run forward and adjoint solver to produce event-dependent misfit kernels.
#    Sum and postprocess kernels to produce gradient. In seismic exploration
#    this is 'reverse time migration'.
#
#    Parameters
#    ----------
#    :type export_gradient: bool
#    :param export_gradient: export the gradient after it has been generated
#        in the scratch directory. If False, gradient can be discarded from
#        scratch at any time in the workflow
#    :type export_kernels: bool
#    :param export_kernels: export each sources event kernels after they have
#        been generated in the scratch directory. If False, gradient can be
#        discarded from scratch at any time in the workflow
#
#        
#    Inversion Workflow
#    ------------------
#    Peforms iterative nonlinear inversion using the machinery of the Forward
#    and Migration workflows, as well as a built-in optimization library.
#
#    Parameters
#    ----------
#    :type start: int
#    :param start: start inversion workflow at this iteration. 1 <= start <= inf
#    :type end: int
#    :param end: end inversion workflow at this iteration. start <= end <= inf
#    :type iteration: int
#    :param iteration: The current iteration of the workflow. If NoneType, takes
#        the value of `start` (i.e., first iteration of the workflow). User can
#        also set between `start` and `end` to resume a failed workflow.
#    :type thrifty: bool
#    :param thrifty: a thrifty inversion skips the costly intialization step
#        (i.e., forward simulations and misfit quantification) if the final
#        forward simulations from the previous iterations line search can be
#        used in the current one. Requires L-BFGS optimization.
#    :type export_model: bool
#    :param export_model: export best-fitting model from the line search to disk.
#        If False, new models can be discarded from scratch at any time.
#
#        
# =============================================================================
stop_after: null
generate_data: True
export_traces: False
export_residuals: False
export_gradient: True
export_kernels: False
start: 1
end: 1000
export_model: True
thrifty: False
iteration: null
# =============================================================================
#
#    Workstation System [System Base]
#    --------------------------------
#    Defines foundational structure for System module. When used standalone,
#    runs solver tasks either in serial (if `nproc`==1; i.e., without MPI) or in
#    parallel (if `nproc`>1; i.e., with MPI). All other tasks are run in serial.
#
#    Parameters
#    ----------
#    :type ntask: int
#    :param ntask: number of individual tasks/events to run during workflow.
#        Must be <= the number of source files in `path_specfem_data`
#    :type nproc: int
#    :param nproc: number of processors to use for each simulation. Choose 1 for
#        serial simulations, and `nproc`>1 for parallel simulations.
#    :type tasktime: float
#    :param tasktime: maximum job time in units minutes for each job spawned by
#        the SeisFlows master job during a workflow. These include, e.g.,
#        running the forward solver, adjoint solver, smoother, kernel combiner.
#        All spawned tasks receive the same task time. Fractions of minutes
#        acceptable. If set as `None`, no tasktime will be enforced.
#    :type mpiexec: str
#    :param mpiexec: MPI executable on system. Defaults to 'mpirun -n ${NPROC}'
#    :type array: str
#    :param array: for `ntask` > 1, determine which tasks to submit to run. By
#        default (NoneType) this submits all task IDs [0:ntask), or for single
#        runs, submits only the first task ID, 0. However, for debugging or
#        manual control purposes, Users may input a string of task IDs that they
#        would like to run. Follows formatting of SLURM array directive
#        (https://slurm.schedmd.com/job_array.html), which is, for example:
#        1,2,3-8:2,10 -> 1,2,3,5,7,10
#        where '-' denotes a range (inclusive), and ':' denotes an optional step.
#        If ':' step is not given for a range, then step defaults to 1.
#    :type rerun: int
#    :param rerun: [EXPERIMENTAL FEATURE] attempt to re-run failed tasks or 
#        array tasks submitted with `run`. Collects information about failed 
#        jobs (or array jobs) after a failure, and re-submits with `run`. 
#        `rerun` is an integer defining how many times the User wants System to
#        try and rerun before failing the entire job. If 0 (default), a single
#        task failure will cause main job failure.
#    :type log_level: str
#    :param log_level: logger level to pass to logging module.
#        Available: 'debug', 'info', 'warning', 'critical'
#    :type verbose: bool
#    :param verbose: if True, formats the log messages to include the file
#        name and line number of the log message in the source code, as well as 
#        the message and message type. Useful for debugging but also very verbose
#        so not recommended for production runs.
#
#        
#    Cluster System
#    --------------
#    Generic or common HPC/cluster interfacing commands
#
#    Parameters
#    ----------
#    :type title: str
#    :param title: The name used to submit jobs to the system, defaults
#        to the name of the current working directory
#    :type mpiexec: str
#    :param mpiexec: Function used to invoke executables on the system.
#        For example 'mpirun', 'mpiexec', 'srun', 'ibrun'
#    :type ntask_max: int
#    :param ntask_max: limit the number of concurrent tasks in a given array job.
#        Note that if you are directly running the Cluster system on a 
#        workstation or the login node of your cluster, try to adhere to 
#        the number of cores on your system should be <= `ntask_max` * `nproc`,
#        otherwise you may face memory allocation errors
#    :type walltime: float
#    :param walltime: maximum job time in minutes for the master SeisFlows
#        job submitted to cluster. Fractions of minutes acceptable.
#    :type environs: str
#    :param environs: Optional environment variables to be provided in the
#        following format VAR1=var1,VAR2=var2... Will be set using
#        os.environs
#
#        
# =============================================================================
ntask: 30
nproc: 1
tasktime: 10
rerun: 0
mpiexec: 
array: null
log_level: INFO
verbose: False
title: testmodel
ntask_max: 30
walltime: 10000
environs: 
# =============================================================================
#
#    Solver SPECFEM [Solver Base]
#    ----------------------------
#    Defines foundational structure for Specfem-based solver module. 
#    Generalized SPECFEM interface to manipulate SPECFEM2D/3D/3D_GLOBE w/ Python
#
#    Parameters
#    ----------
#    :type syn_data_format: str
#    :param syn_data_format: data format for reading synthetic traces into memory.
#        Available: ['SU': seismic unix format, 'ASCII': human-readable ascii]
#    :type materials: str
#    :param materials: Material parameters used to define model. Available:
#        ['ELASTIC': Vp, Vs, 'ACOUSTIC': Vp, 'ISOTROPIC', 'ANISOTROPIC']
#    :type density: bool
#    :param density: How to treat density during inversion. If True, updates
#        density during inversion. If False, keeps it constant.
#        TODO allow density scaling during an inversion
#    :type attenuation: bool
#    :param attenuation: How to treat attenuation during inversion.
#        if True, turns on attenuation during forward simulations only. If
#        False, attenuation is always set to False. Requires underlying
#        attenution (Q_mu, Q_kappa) model
#    :type smooth_h: float
#    :param smooth_h: Gaussian half-width for horizontal smoothing in units
#        of meters. If 0., no smoothing applied. Only applicable for workflows:
#        ['migration', 'inversion'], ignored for 'forward' workflow.
#        SPECFEM3D_GLOBE only: if `smooth_type`=='laplacian' then this is just 
#        the X and Y extent of the applied smoothing
#    :type smooth_h: float
#    :param smooth_v: Gaussian half-width for vertical smoothing in units
#        of meters. Only applicable for workflows: ['migration', 'inversion'],
#        ignored for 'forward' workflow.
#        SPECFEM3D_GLOBE only: if `smooth_type`=='laplacian' then this is just 
#        the Z extent of the applied smoothing
#    :type components: str
#    :param components: components to search for synthetic data with. None by
#        default which uses a wildcard when searching for synthetics. If
#        provided, User only wants to use a subset of components generated by
#        SPECFEM. In that case, `components` should be string of letters such
#        as 'ZN' (for up and north components)
#    :type solver_io: str
#    :param solver_io: format of model/kernel/gradient files expected by the
#        numerical solver. Available: ['fortran_binary': default .bin files].
#        TODO: ['adios': ADIOS formatted files]
#    :type source_prefix: str
#    :param source_prefix: prefix of source/event/earthquake files. If None,
#        will attempt to guess based on the specific solver chosen.
#    :type mpiexec: str
#    :param mpiexec: MPI executable used to run parallel processes. Should also
#        be defined for the system module
#
#        
#    Solver SPECFEM2D
#    ----------------
#    SPECFEM2D-specific alterations to the base SPECFEM module
#
#    Parameters
#    ----------
#    :type source_prefix: str
#    :param source_prefix: Prefix of source files in path SPECFEM_DATA. Defaults
#        to 'SOURCE'
#    :type multiples: bool
#    :param multiples: set an absorbing top-boundary condition
#
#        
# =============================================================================
syn_data_format: ascii
materials: elastic
update_density: False
attenuation: False
smooth_h: 3
smooth_v: 1
components: null
source_prefix: SOURCE
prune_scratch: null
multiples: True
# =============================================================================
#
#    Default Preprocess [Preprocess Base]
#    ------------------------------------
#    Data processing for seismic traces, with options for data misfit,
#    filtering, normalization and muting.
#
#    Parameters
#    ----------
#    :type obs_data_format: str
#    :param obs_data_format: data format for reading observed traces into
#        memory. Available formats: 'su', 'ascii', 'sac'
#    :type unit_output: str
#    :param unit_output: Data units. Must match the synthetic output of
#        external solver. Available: ['DISP': displacement, 'VEL': velocity,
#        'ACC': acceleration, 'PRE': pressure]
#    :type misfit: str
#    :param misfit: misfit function for waveform comparisons. For available
#        see seisflows.plugins.preprocess.misfit
#    :type adjoint: str
#    :param adjoint: adjoint source misfit function (backprojection function for
#        migration, or the objective function in FWI). For available see
#        seisflows.plugins.preprocess.adjoint
#    :type normalize: str
#    :param normalize: Data normalization parameters used to normalize the
#        amplitudes of waveforms. By default, set to NoneType, which means no
#        normalization is applied. User can choose from one of the following
#        options to normalize BOTH `obs` and `syn` data:
#
#        - TNORML1: normalize per trace by the L1 norm of itself
#        - TNORML2: normalize per trace by the L2 norm of itself
#        - TNORM_MAX: normalize by the maximum positive amplitude in the trace
#        - TNORM_ABSMAX: normalize by the absolute maximum amplitude in the trace
#        - TNORM_MEAN: normalize by the mean of the absolute trace
#        - RNORM_OBS_MAX: normalize synthetic traces by the maximum amplitude of
#            the corresponding observed trace
#        - RNORM_OBS_ABSMAX: normalize synthetic traces by the absolute maximum
#            amplitude of the corresponding observed trace
#        - RNORM_SYN_MAX: normalize observed traces by the maximum amplitude of
#            the corresponding synthetic trace
#        - RNORM_SYN_ABSMAX: normalize observed traces by the absolute maximum
#            amplitude of the corresponding synthetic trace
#
#        Note: options ENORML? are not currently available. If this is a
#        feature you would like to see, please open a GitHub Issue.
#        - ENORML1: normalize per event by L1 of traces; OR
#        - ENORML2: normalize per event by L2 of traces;
#    :type filter: str
#    :param filter: Data filtering type, by default no filtering is applied.
#        Available options for user to choose are:
#
#        - BANDPASS (requires: MIN_FREQ + MAX_FREQ OR MIN_PERIOD + MAX PERIOD);
#        - LOWPASS (requires: MAX_FREQ OR MIN_PERIOD);
#        - HIGHPASS (requires: MIN_FREQ OR MAX_PERIOD);
#    :type min_period: float
#    :param min_period: Minimum filter period applied to time series.
#        See also MIN_FREQ, MAX_FREQ, if User defines FREQ parameters, they
#        will overwrite PERIOD parameters.
#    :type max_period: float
#    :param max_period: Maximum filter period applied to time series. See
#        also MIN_FREQ, MAX_FREQ, if User defines FREQ parameters, they will
#        overwrite PERIOD parameters.
#    :type min_freq: float
#    :param min_freq: Maximum filter frequency applied to time series,
#        See also MIN_PERIOD, MAX_PERIOD, if User defines FREQ parameters,
#        they will overwrite PERIOD parameters.
#    :type max_freq: float
#    :param max_freq: Maximum filter frequency applied to time series,
#        See also MIN_PERIOD, MAX_PERIOD, if User defines FREQ parameters,
#        they will overwrite PERIOD parameters.
#    :type mute: list
#    :param mute: Data mute parameters used to zero out early / late
#        arrivals or offsets. Choose the following:
#        - EARLY: mute early arrivals
#        - LATE: mute late arrivals;
#        - SHORT: mute short source-receiver distances;
#        - LONG: mute long source-receiver distances
#        input comma separated list of strings, (e.g., mute: early,late,short)
#    :type plot_waveforms: bool
#    :param plot_waveforms: plot waveforms from each evaluation of the misfit.
#        By default turned off as this can produce many files for an interative
#        inversion.
#
#        
# =============================================================================
obs_data_format: ASCII
unit_output: DISP
misfit: waveform
adjoint: waveform
normalize: []
filter: null
min_period: null
max_period: null
min_freq: null
max_freq: null
mute: []
early_slope: null
early_const: null
late_slope: null
late_const: null
short_dist: null
long_dist: null
plot_waveforms: False
# =============================================================================
#
#    Gradient Optimization [Optimize Base]
#    -------------------------------------
#    Defines foundational structure for Optimization module. Applies a 
#    gradient/steepest descent optimization algorithm.
#
#    Parameters
#    ----------
#    :type line_search_method: str
#    :param line_search_method: chosen line_search algorithm. Currently available
#        are 'bracket' and 'backtrack'. See seisflows.plugins.line_search
#        for all available options
#    :type preconditioner: str
#    :param preconditioner: algorithm for preconditioning gradients. Currently
#        available: 'diagonal'. Requires `path_preconditioner` to point to a
#        set of files that define the preconditioner, formatted the same as the
#        input model
#    :type step_count_max: int
#    :param step_count_max: maximum number of trial steps to perform during
#        the line search before a change in line search behavior is
#        considered, or a line search is considered to have failed.
#    :type step_len_init: float
#    :param step_len_init: initial line search step length guess, provided
#        as a fraction of current model parameters.
#    :type step_len_max: float
#    :param step_len_max: optional, maximum allowable step length during the line
#        search. Set as a fraction of the current model parameters
#    :type step_len_min: float
#    :param step_len_min: optional, minimum allowable step length during the line
#        search. Set as a fraction of the current model parameters
#
#        
# =============================================================================
preconditioner: null
step_count_max: 5
step_len_init: 0.01
step_len_max: 0.1
step_len_min: 0.001
line_search_method: bracket1
# =============================================================================
#    WD parameter [misfit adjoint parameter]
#    -------------------------------------
#    WD parameter
#
#    Parameters
#    ----------
offset: 48
fmin: 10
fmax: 80
vpmax: 1885.32
vpmin: 963.55
vsmax: 942.66
vsmin: 481.78
vmin: 200
vmax: 1200
df: 0.2
dt: 1e-4
ng: 90
ns: 30
dg: 2
M: 3
w: 3
# =============================================================================
#
#	 Paths
#	 -----
#    :type workdir: str
#    :param workdir: working directory in which to perform a SeisFlows workflow.
#        SeisFlows internal directory structure will be created here. Default cwd
#    :type path_output: str
#    :param path_output: path to directory used for permanent storage on disk.
#        Results and exported scratch files are saved here.
#    :type path_data: str
#    :param path_data: path to any externally stored data required by the solver
#    :type path_state_file: str
#    :param path_state_file: path to a text file used to track the current
#        status of a workflow (i.e., what functions have already been completed),
#        used for checkpointing and resuming workflows
#    :type path_model_init: str
#    :param path_model_init: path to the starting model used to calculate the
#        initial misfit. Must match the expected `solver_io` format.
#    :type path_model_true: str
#    :param path_model_true: path to a target model if `case`=='synthetic' and
#        a set of synthetic 'observations' are required for workflow.
#    :type path_eval_grad: str
#    :param path_eval_grad: scratch path to store files for gradient evaluation,
#        including models, kernels, gradient and residuals.
#        :type path_mask: str
#    :param path_mask: optional path to a masking function which is used to
#        mask out or scale parts of the gradient. The user-defined mask must
#        match the file format of the input model (e.g., .bin files).
#        :type path_eval_func: str
#    :param path_eval_func: scratch path to store files for line search objective
#        function evaluations, including models, misfit and residuals
#        
#    :type path_output_log: str
#    :param path_output_log: path to a text file used to store the outputs of
#        the package wide logger, which are also written to stdout
#    :type path_par_file: str
#    :param path_par_file: path to parameter file which is used to instantiate
#        the package
#    :type path_log_files: str
#    :param path_log_files: path to a directory where individual log files are
#        saved whenever a number of parallel tasks are run on the system.
#            
#    :type path_data: str
#    :param path_data: path to any externally stored waveform data required for 
#        data-synthetic comparison
#    :type path_specfem_bin: str
#    :param path_specfem_bin: path to SPECFEM bin/ directory which
#        contains binary executables for running SPECFEM
#    :type path_specfem_data: str
#    :param path_specfem_data: path to SPECFEM DATA/ directory which must
#        contain the CMTSOLUTION, STATIONS and Par_file files used for
#        running SPECFEM
#            
#    :type path_preprocess: str
#    :param path_preprocess: scratch path for all preprocessing processes,
#        including saving files
#        
#    :type path_preconditioner: str
#    :param path_preconditioner: optional path to a set of preconditioner files
#        formatted the same as the input model (or output model of solver).
#        Required to exist and contain files if `preconditioner`==True
#        
# =============================================================================
path_model_init: /csim1/zhangchang/testmodel2/specfem2d_workdir/OUTPUT_FILES_INIT
path_model_true: /csim1/zhangchang/testmodel2/specfem2d_workdir/OUTPUT_FILES_TRUE
path_data: waveforms
path_mask: null
path_dispersion: dispersion
path_specfem_bin: /csim1/zhangchang/testmodel2/specfem2d_workdir/bin
path_specfem_data: /csim1/zhangchang/testmodel2/specfem2d_workdir/DATA
path_preconditioner: null
# -----------------------------------------------------------------------------
# Parameters below define the working directory and can be left default
# -----------------------------------------------------------------------------
path_workdir: .
path_output_log: sflog.txt
path_state_file: sfstate.txt
path_par_file: parameters.yaml
path_output: output
path_scratch: scratch
path_log_files: logs
